class Solution {
public:
    void solveSudoku(vector<vector<char> > &board) {
        solve(board);
    }
    bool solve(vector<vector<char> > &board)
    {
        for(int i=0;i<9;i++)
        {
            for(int j=0;j<9;j++)
            {
                if(board[i][j]=='.')
                {
                    for(int num=1;num<=9;num++)
                    {
                        board[i][j]='0'+num;
                        if(isValid(board,i,j)&&solve(board))
                            return true;
                        board[i][j]='.';
                    }
                    return false;
                }
            }
        }
        return true;
    }
    bool isValid(vector<vector<char> > &board,int row,int col)
    {
        char target=board[row][col];
        for(int i=0;i<9;i++)
        {
            if(board[row][i]==target&&i!=col||board[i][col]==target&&i!=row) 
                return false;
        }
        int r=row/3;int c=col/3;
        for(int i=r*3;i<(r+1)*3;i++)
        {
            for(int j=c*3;j<(c+1)*3;j++)
            {
                if(board[i][j]==target&&i!=row&&j!=col) 
                    return false;
            }
        }
        return true;
    }
};
